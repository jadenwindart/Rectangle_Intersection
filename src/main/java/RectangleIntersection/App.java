/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package RectangleIntersection;

import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;
import RectangleIntersection.model.Intersection;
import RectangleIntersection.model.Rectangle;

public class App {
    public String getGreeting() {
        return "Hello world.";
    }

    public static void main(String[] args) {
        InputStream fileStream = Thread.currentThread().getContextClassLoader().getResourceAsStream("Rectangles.json");
        ObjectMapper objectMapper = new ObjectMapper();

        Map<String, Object> rectangleMap = new HashMap<>();

        try {
            rectangleMap = objectMapper.readValue(fileStream, Map.class);
        } catch (Exception e) {
            throw new RuntimeException(e.getMessage());
        }

        List<Map<String, Integer>> rectangleList = (List<Map<String, Integer>>) rectangleMap.get("rects");

        List<Rectangle> rectangles =  IntStream.range(0, rectangleList.size())
            .mapToObj((index) -> {
                try {
                    Rectangle inputRectangle = new Rectangle(
                        rectangleList.get(index).get("x"),
                        rectangleList.get(index).get("y"),
                        rectangleList.get(index).get("w"),
                        rectangleList.get(index).get("h")
                    );

                    inputRectangle.setRectangleConstructors(List.of(index + 1));
                    return inputRectangle;
                } catch (Exception e) {
                    throw new RuntimeException(e.getMessage());
                }

            })
            .collect(Collectors.toList());

        //Print provided Rectangle
        System.out.println("Input:");
        IntStream.range(0, rectangles.size())
            .forEach((index) -> {
                System.out.println(
                    String.format(
                        "%d: Rectangle at (%d,%d), w=%d, h=%d",
                        index + 1,
                        rectangles.get(index).getXCoord(),
                        rectangles.get(index).getYCoord(),
                        rectangles.get(index).getWidth(),
                        rectangles.get(index).getHeight()
                    )
                );
            });

        List<Intersection> intersections = new ArrayList<>();
        List<Intersection> tempIntersections = new ArrayList<>();

        Integer intersectCounter = 0;

        System.out.println("Intersections: ");
        for (int i = 0; i < rectangles.size(); i++) {
            for (int j = i + 1; j < rectangles.size(); j++) {
                Rectangle checkedRectangle = rectangles.get(j);

                boolean isIntersect = rectangles.get(i).checkRectangleIntersection(
                    checkedRectangle.getXCoord(),
                    checkedRectangle.getYCoord(),
                    checkedRectangle.getWidth(),
                    checkedRectangle.getHeight()
                );


                if (isIntersect) {
                    intersectCounter++;
                    List<Integer> newRectangleConstructors = Stream.concat(rectangles.get(i).getRectangleConstructors().stream(), checkedRectangle.getRectangleConstructors().stream())
                        .collect(Collectors.toList());

                    Intersection intersection = rectangles.get(i).computeIntersection(
                        newRectangleConstructors,
                        checkedRectangle.getXCoord(),
                        checkedRectangle.getYCoord(),
                        checkedRectangle.getWidth(),
                        checkedRectangle.getHeight()
                    );
                    intersections.add(intersection);
                    tempIntersections.add(intersection);

                    String outputIntersect =
                        String.format(
                            "%d: Between rectangle %d and %d at (%d,%d), w=%d, h=%d.",
                            intersectCounter,
                            i + 1,
                            j + 1,
                            intersection.getXCoord(),
                            intersection.getYCoord(),
                            intersection.getWidth(),
                            intersection.getHeight()
                        );

                    System.out.println(outputIntersect);
                }
            }
        }

        for (int i = 0; i < tempIntersections.size(); i++) {
            Rectangle intersectionRectangle;

            List<Intersection> intersectedIntersection = new ArrayList<>();

            try {
                intersectionRectangle = new Rectangle(
                    tempIntersections.get(i).getXCoord(),
                    tempIntersections.get(i).getYCoord(),
                    tempIntersections.get(i).getWidth(),
                    tempIntersections.get(i).getHeight()
                );
            } catch (Exception e) {
                throw new RuntimeException(e.getMessage());
            }

            for (int j = i + 1; j < tempIntersections.size(); j++) {
                Rectangle checkedIntersection;

                try {
                    checkedIntersection = new Rectangle(
                        tempIntersections.get(j).getXCoord(),
                        tempIntersections.get(j).getYCoord(),
                        tempIntersections.get(j).getWidth(),
                        tempIntersections.get(j).getHeight()
                    );
                } catch (Exception e) {
                    throw new RuntimeException(e.getMessage());
                }

                Boolean isIntersect = intersectionRectangle.checkRectangleIntersection(
                    checkedIntersection.getXCoord(),
                    checkedIntersection.getYCoord(),
                    checkedIntersection.getWidth(),
                    checkedIntersection.getHeight()
                );

                if (isIntersect) {
                    intersectedIntersection.add(tempIntersections.get(j));
                    tempIntersections.remove(j);
                }
            }

            if (intersectedIntersection.size() != 0) {
                intersectCounter++;

                Intersection intersection = tempIntersections.get(i).computeIntersection(
                    intersectedIntersection
                );
                intersections.add(intersection);

                String outputIntersect =
                    String.format(
                        "%d: Between rectangle ",
                        intersectCounter
                    );

                List<Integer> intersectionConstructors = intersection.getIntersectedRectangles();

                for (Integer k = 0; k < intersectionConstructors.size(); k++) {
                    if (k + 1 == intersectionConstructors.size()){
                        outputIntersect += String.format(
                            "and %d ",
                            intersectionConstructors.get(k)
                        );
                    } else {
                        outputIntersect += String.format(
                            "%d, ",
                            intersectionConstructors.get(k)
                        );
                    }
                }

                outputIntersect += String.format(
                    "at (%d,%d), w=%d, h=%d.",
                    intersection.getXCoord(),
                    intersection.getYCoord(),
                    intersection.getWidth(),
                    intersection.getHeight()
                );

                System.out.println(outputIntersect);
            }
        }
    }
}
